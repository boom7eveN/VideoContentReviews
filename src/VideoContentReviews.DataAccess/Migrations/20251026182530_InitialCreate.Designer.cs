// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VideoContentReviews.DataAccess.Context;

#nullable disable

namespace VideoContentReviews.DataAccess.Migrations
{
    [DbContext(typeof(VideoContentReviewsDbContext))]
    [Migration("20251026182530_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.DirectorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.FavouriteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoContentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VideoContentId");

                    b.ToTable("Favourite");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("FileExtension")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoContentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VideoContentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.TypeOfContentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("TypesOfContent");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.VideoContentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DirectorId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfContentId")
                        .HasColumnType("integer");

                    b.Property<double>("UserAverageRating")
                        .HasColumnType("double precision");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("ImageId");

                    b.HasIndex("TypeOfContentId");

                    b.ToTable("VideoContent");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.VideoContentGenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VideoContentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("GenreId");

                    b.HasIndex("VideoContentId", "GenreId")
                        .IsUnique();

                    b.ToTable("VideoContentGenres");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.FavouriteEntity", b =>
                {
                    b.HasOne("VideoContentReviews.DataAccess.Entities.UserEntity", "UserEntity")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoContentReviews.DataAccess.Entities.VideoContentEntity", "VideoContentEntity")
                        .WithMany("Favourites")
                        .HasForeignKey("VideoContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");

                    b.Navigation("VideoContentEntity");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.ReviewEntity", b =>
                {
                    b.HasOne("VideoContentReviews.DataAccess.Entities.UserEntity", "UserEntity")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoContentReviews.DataAccess.Entities.VideoContentEntity", "VideoContentEntity")
                        .WithMany("Reviews")
                        .HasForeignKey("VideoContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");

                    b.Navigation("VideoContentEntity");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.VideoContentEntity", b =>
                {
                    b.HasOne("VideoContentReviews.DataAccess.Entities.DirectorEntity", "DirectorEntity")
                        .WithMany("VideoContents")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoContentReviews.DataAccess.Entities.ImageEntity", "ImageEntity")
                        .WithMany("VideoContents")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoContentReviews.DataAccess.Entities.TypeOfContentEntity", "TypeOfContentEntity")
                        .WithMany("VideoContents")
                        .HasForeignKey("TypeOfContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorEntity");

                    b.Navigation("ImageEntity");

                    b.Navigation("TypeOfContentEntity");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.VideoContentGenreEntity", b =>
                {
                    b.HasOne("VideoContentReviews.DataAccess.Entities.GenreEntity", "GenreEntity")
                        .WithMany("VideoContentsGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoContentReviews.DataAccess.Entities.VideoContentEntity", "VideoContentEntity")
                        .WithMany("VideoContentsGenres")
                        .HasForeignKey("VideoContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenreEntity");

                    b.Navigation("VideoContentEntity");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.DirectorEntity", b =>
                {
                    b.Navigation("VideoContents");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.GenreEntity", b =>
                {
                    b.Navigation("VideoContentsGenres");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.ImageEntity", b =>
                {
                    b.Navigation("VideoContents");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.TypeOfContentEntity", b =>
                {
                    b.Navigation("VideoContents");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("VideoContentReviews.DataAccess.Entities.VideoContentEntity", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Reviews");

                    b.Navigation("VideoContentsGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
